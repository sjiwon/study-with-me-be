name: Backend CD

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: study-with-me-be
  TAG: latest

jobs:
  Build-Deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Repository를 가져온다
        uses: actions/checkout@v3

      - name: JDK 17을 설치한다
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Gradle 정보를 캐싱한다
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Timezone을 Asia/Seoul로 설정한다
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Asia/Seoul

      - name: Github Action Secrets에 등록된 Production 환경 Prometheus.yml을 가져온다
        env:
          PROD_PROMETHEUS_YML: ${{ secrets.PROD_PROMETHEUS_YML }}
        run: echo $PROD_PROMETHEUS_YML | base64 --decode > ./prometheus-prod.yml

      - name: Gradle 명령 실행을 위한 권한을 부여한다
        run: chmod +x gradlew

      - name: Gradle build를 수행한다
        run: ./gradlew bootJar

      - name: Docker Hub에 로그인을 진행한다
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker Hub에 Docker Image를 Push한다
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} .
          docker images
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: docker-compose-prod.yml, prometheus-prod.yml을 EC2에 전송한다
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./docker-compose-prod.yml, ./prometheus-prod.yml"
          target: "/home/ec2-user/Study-With-Me-Backend"

      - name: EC2 WAS 서버에 접속 후 Docker Image를 Pull하고 docker-compose를 실행한다
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/Study-With-Me-Backend
            sudo docker rm -f $(sudo docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
            sudo docker-compose -f docker-compose-prod.yml up -d
            sudo docker image prune -f
